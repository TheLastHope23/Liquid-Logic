import copy
import random
import pygame

pygame.init()

# Load background music
pygame.mixer.music.load('vibe.mp3')
pygame.mixer.music.play(-1)

# Game window settings
WIDTH, HEIGHT = 600, 600
screen = pygame.display.set_mode([WIDTH, HEIGHT])
pygame.display.set_caption('Liquid Logic')
font = pygame.font.Font('freesansbold.ttf', 24)
fps = 60
timer = pygame.time.Clock()

# Define available colors
color_choices = ['red', 'orange', 'light blue', 'dark blue', 'dark green', 'pink', 'purple', 'black', 'brown',
                 'light green', 'yellow', 'white', 'gray']
tube_colors = []
initial_colors = []
previous_state = None
new_game = True
selected = False
tube_rects = []
select_rect = -1
win = False
move_count = 0
max_moves = 50  # Limit the number of moves allowed
game_active = False  # Track if the game is active or menu is showing
music_muted = False  # Track whether the music is muted or not

# Load menu background image
menu_background = pygame.image.load('bg.png')
menu_background = pygame.transform.scale(menu_background, (WIDTH, HEIGHT))


def generate_start():
    tubes_number = random.randint(8, 10)
    tubes_colors = [[] for _ in range(tubes_number)]
    available_colors = []

    for i in range(tubes_number - 2):  # Now only 2 empty tubes to make it harder
        for _ in range(4):
            available_colors.append(i)

    for i in range(tubes_number - 2):
        for _ in range(4):
            color = random.choice(available_colors)
            tubes_colors[i].append(color)
            available_colors.remove(color)

    return tubes_number, tubes_colors


def draw_background():
    screen.fill((30, 30, 30))
    for y in range(HEIGHT):
        color = 7 + (y * 225 // HEIGHT)
        pygame.draw.line(screen, (color, color, color), (0, y), (WIDTH, y))


def draw_tubes(tubes_num, tube_cols):
    tube_boxes = []
    tubes_per_row = (tubes_num + 1) // 2
    spacing = WIDTH / tubes_per_row

    for i in range(tubes_per_row):
        for j in range(len(tube_cols[i])):
            pygame.draw.rect(screen, pygame.Color(color_choices[tube_cols[i][j]]),
                             [5 + spacing * i, 200 - (50 * j), 65, 50], 0, 3)
        box = pygame.draw.rect(screen, (0, 0, 255), [5 + spacing * i, 50, 65, 200], 5, 5)
        if select_rect == i:
            pygame.draw.rect(screen, (0, 255, 0), [5 + spacing * i, 50, 65, 200], 3, 5)
        tube_boxes.append(box)

    for i in range(tubes_per_row, tubes_num):
        for j in range(len(tube_cols[i])):
            pygame.draw.rect(screen, pygame.Color(color_choices[tube_cols[i][j]]),
                             [5 + spacing * (i - tubes_per_row), 450 - (50 * j), 65, 50], 0, 3)
        box = pygame.draw.rect(screen, (0, 0, 255), [5 + spacing * (i - tubes_per_row), 300, 65, 200], 5, 5)
        if select_rect == i:
            pygame.draw.rect(screen, (0, 255, 0), [5 + spacing * (i - tubes_per_row), 300, 65, 200], 3, 5)
        tube_boxes.append(box)

    return tube_boxes


def calc_move(colors, selected_rect, destination):
    global previous_state, move_count
    previous_state = copy.deepcopy(colors)

    if len(colors[selected_rect]) > 0:
        color_to_move = colors[selected_rect][-1]
        if len(colors[destination]) < 4 and (len(colors[destination]) == 0 or colors[destination][-1] == color_to_move):
            colors[destination].append(colors[selected_rect].pop())
            move_count += 1  # Increment move count
    return colors


def check_victory(colors):
    for tube in colors:
        if len(tube) != 0 and (len(tube) != 4 or len(set(tube)) != 1):
            return False
    return True


# Toggle music between muted and unmuted
def toggle_music():
    global music_muted
    if music_muted:
        pygame.mixer.music.unpause()  # Unpause the music
        music_muted = False
    else:
        pygame.mixer.music.pause()  # Pause the music
        music_muted = True


# Menu function to display on game start
def show_menu():
    # Display the background image
    screen.blit(menu_background, (0, 0))

    start_text = font.render("Start Game", True, 'black')
    quit_text = font.render("Quit", True, 'red')
    mute_text = font.render("Mute" if not music_muted else "Unmute", True, 'white')

    screen.blit(start_text, (WIDTH // 2 - start_text.get_width() // 2, HEIGHT // 2))
    screen.blit(quit_text, (WIDTH // 2 - quit_text.get_width() // 2, HEIGHT // 2 + 50))
    screen.blit(mute_text, (WIDTH // 2 - mute_text.get_width() // 2, HEIGHT // 2 + 100))

    pygame.display.flip()

    # Detect mouse clicks to start, quit, or mute/unmute
    menu_running = True
    while menu_running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_x, mouse_y = event.pos
                if WIDTH // 2 - start_text.get_width() // 2 <= mouse_x <= WIDTH // 2 + start_text.get_width() // 2 and \
                        HEIGHT // 2 <= mouse_y <= HEIGHT // 2 + start_text.get_height():
                    return True  # Start the game
                if WIDTH // 2 - quit_text.get_width() // 2 <= mouse_x <= WIDTH // 2 + quit_text.get_width() // 2 and \
                        HEIGHT // 2 + 50 <= mouse_y <= HEIGHT // 2 + 50 + quit_text.get_height():
                    pygame.quit()
                    exit()  # Quit the game
                if WIDTH // 2 - mute_text.get_width() // 2 <= mouse_x <= WIDTH // 2 + mute_text.get_width() // 2 and \
                        HEIGHT // 2 + 100 <= mouse_y <= HEIGHT // 2 + 100 + mute_text.get_height():
                    toggle_music()  # Mute or unmute the music


# Main game loop
run = True
while run:
    if not game_active:
        game_active = show_menu()  # Show the menu and wait for the user to start the game

    draw_background()
    timer.tick(fps)

    if new_game:
        tubes, tube_colors = generate_start()
        initial_colors = copy.deepcopy(tube_colors)
        new_game = False
        move_count = 0  # Reset the move counter
    else:
        tube_rects = draw_tubes(tubes, tube_colors)

    win = check_victory(tube_colors)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_SPACE:  # Restart to original state
                tube_colors = copy.deepcopy(initial_colors)
                move_count = 0  # Reset move counter
            elif event.key == pygame.K_RETURN:  # Generate new game
                new_game = True
            elif event.key == pygame.K_u and previous_state:  # Undo move
                tube_colors = copy.deepcopy(previous_state)
                move_count -= 1  # Decrease move count on undo
        if event.type == pygame.MOUSEBUTTONDOWN:
            for idx, rect in enumerate(tube_rects):
                if rect.collidepoint(event.pos):
                    if not selected:
                        selected = True
                        select_rect = idx
                    else:
                        tube_colors = calc_move(tube_colors, select_rect, idx)
                        selected = False
                        select_rect = -1

    if win:
        victory_text = font.render('You Won! Press Enter for a new board!', True, 'gray')
        screen.blit(victory_text, (30, 265))

    move_text = font.render(f'Moves: {move_count}/{max_moves}', True, 'gray')
    screen.blit(move_text, (10, 40))

    restart_text = font.render('Stuck? Space-Restart, Enter-New Board, U-Undo!', True, 'gray')
    screen.blit(restart_text, (10, 10))

    if move_count > max_moves:
        game_over_text = font.render('Out of moves! Press Enter for a new board!', True, 'red')
        screen.blit(game_over_text, (30, 300))

    pygame.display.flip()

pygame.quit()
